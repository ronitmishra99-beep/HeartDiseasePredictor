# -*- coding: utf-8 -*-
"""PA3 Heart Disease Predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xgtqdhq_8Xmh3yhdEzXuWYa21jKMbUrn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_csv("/content/CHD_balanced.csv")
df_clean = df.dropna()
df_clean

y = df_clean["TenYearCHD"]
y

x = df_clean.drop("TenYearCHD", axis = 1)
x

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=100)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
rf = RandomForestClassifier(n_estimators=35, max_depth=10, random_state=100)
rf.fit(x_train,y_train)
y_pred = rf.predict(x_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report", classification_report(y_test, y_pred))

a = df[["age","TenYearCHD"]].dropna()

bins = range(20,90,10)

b = [f"{b}-{b+9}" for b in bins[:-1]]
a["Age_Group"] = pd.cut(a["age"],bins = bins, labels = b,right = False)
# right = False means that each bin includes its left edge but not the right edge
# cut is used to split continuous numeric data into discrete bins
Age_Group = (a.groupby("Age_Group")["TenYearCHD"].agg(["count", "sum"]).rename(columns = {"count":"total","sum":"TenYearCHD"}))
# Add percentage column
Age_Group["Percentage"] = (Age_Group["TenYearCHD"]/Age_Group["total"]*100).round(1)
print(Age_Group)

#Sort the dataset by age (descending) and display the top 5 oldest people who developed heart disease.
# Using groupby(['male', 'currentSmoker']), calculate the mean cholesterol (totChol) for each combination of gender and smoker status

import pandas as pd
import matplotlib.pyplot as plt

# Load your dataset
df = pd.read_csv("/content/CHD_balanced.csv")
df_clean = df.dropna()

# Count of each label (0 = no heart disease, 1 = heart disease)
label_counts = df_clean["TenYearCHD"].value_counts().sort_index()

# Plot
plt.figure(figsize=(6,4))
label_counts.plot(kind='bar', color=['skyblue', 'salmon'])
plt.title("Distribution of TenYearCHD (Label)")
plt.xlabel("TenYearCHD")
plt.ylabel("Count")
plt.xticks([0,1], ["No CHD (0)", "CHD (1)"], rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()

# Show the plot
plt.show()

label_counts = df_clean["TenYearCHD"].value_counts()
label_percentages = df_clean["TenYearCHD"].value_counts(normalize=True) * 100

print("Label Counts:\n", label_counts)
print("\nLabel Percentages:\n", label_percentages.round(2))